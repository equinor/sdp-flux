---
apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  name: falco
  namespace: falco
spec:
  releaseName: falco
  chart:
    repository: https://falcosecurity.github.io/charts
    name: falco
    version: 1.2.1
  values:
    falco:
      jsonOutput: true
      grpc:
        enabled: true
      grpcOutput:
        enabled: true
    customRules: # From https://github.com/falcosecurity/cloud-native-security-hub/tree/master/resources/falco
      falco_rules.local.yaml: | # Override default rules
        - rule: Launch Suspicious Network Tool in Container
          desc: Detect network tools launched inside container
          condition: >
            spawned_process and container and network_tool_procs and not user_known_network_tool_activities
          output: >
            Network tool launched in container (user=%user.name command=%proc.cmdline parent_process=%proc.pname
            container_id=%container.id container_name=%container.name image=%container.image.repository:%container.image.tag)
          priority: NOTICE
          tags: [network, process, mitre_discovery, mitre_exfiltration]
        - rule: Launch Privileged Container
          desc: Detect the initial process started in a privileged container. Exceptions are made for known trusted images.
          condition: >
            container_started and container
            and container.privileged=true
            and not falco_privileged_containers
            and not user_privileged_containers
            and k8s.pod.labels != app:kured
            and k8s.ns.name != kube-system
            and k8s.ns.name != falco
          output: Privileged container started (user=%user.name command=%proc.cmdline %container.info image=%container.image.repository:%container.image.tag)
          priority: INFO
          tags: [container, cis, mitre_privilege_escalation, mitre_lateral_movement]
        - rule: Redirect STDOUT/STDIN to Network Connection in Container
          desc: Detect redirecting stdout/stdin to network connection in container (potential reverse shell).
          condition: evt.type=dup and evt.dir=> and container and fd.num in (0, 1, 2) and fd.type in ("ipv4", "ipv6") and not user_known_stand_streams_redirect_activities and k8s.deployment.name != gitlab-gitlab-shell
          output: >
            Redirect stdout/stdin to network connection (user=%user.name %container.info process=%proc.name parent=%proc.pname cmdline=%proc.cmdline terminal=%proc.tty container_id=%container.id image=%container.image.repository fd.name=%fd.name fd.num=%fd.num fd.type=%fd.type fd.sip=%fd.sip)
          priority: WARNING
        - rule: Contact K8S API Server From Container
          desc: Detect attempts to contact the K8S API Server from a container
          condition: >
            evt.type=connect and evt.dir=< and
            (fd.typechar=4 or fd.typechar=6) and
            container and
            not k8s_containers and
            k8s_api_server and
            not user_known_contact_k8s_api_server_activities
            and k8s.pod.labels != app:kured
            and k8s.ns.name != flux
            and k8s.ns.name != kubediff
          output: Unexpected connection to K8s API Server from container (command=%proc.cmdline %container.info image=%container.image.repository:%container.image.tag connection=%fd.name)
          priority: NOTICE
          tags: [network, k8s, container, mitre_discovery]
        - rule: Launch Sensitive Mount Container
          desc: >
            Detect the initial process started by a container that has a mount from a sensitive host directory
            (i.e. /proc). Exceptions are made for known trusted images.
          condition: >
            container_started and container
            and sensitive_mount
            and not falco_sensitive_mount_containers
            and not user_sensitive_mount_containers
            and not k8s.ns.name = falco
            and not k8s.ns.name = kube-system
            and k8s.pod.labels != app:prometheus-node-exporter
          output: Container with sensitive mount started (user=%user.name command=%proc.cmdline %container.info image=%container.image.repository:%container.image.tag mounts=%container.mounts)
          priority: INFO
          tags: [container, cis, mitre_lateral_movement]
        - rule: The docker client is executed in a container
          desc: Detect a k8s client tool executed inside a container
          condition: spawned_process and container and not user_known_k8s_client_container_parens and proc.name in (k8s_client_binaries) and not k8s.ns.name = kubediff and not k8s.ns.name = flux
          output: "Docker or kubernetes client executed in container (user=%user.name %container.info parent=%proc.pname cmdline=%proc.cmdline image=%container.image.repository:%container.image.tag)"
          priority: WARNING
          tags: [container, mitre_execution]
        - rule: Write below root
          desc: an attempt to write to any file directly below / or /root
          condition: >
            root_dir and evt.dir = < and open_write
            and not fd.name in (known_root_files)
            and not fd.directory pmatch (known_root_directories)
            and not exe_running_docker_save
            and not gugent_writing_guestagent_log
            and not dse_writing_tmp
            and not zap_writing_state
            and not airflow_writing_state
            and not rpm_writing_root_rpmdb
            and not maven_writing_groovy
            and not chef_writing_conf
            and not kubectl_writing_state
            and not cassandra_writing_state
            and not galley_writing_state
            and not calico_writing_state
            and not rancher_writing_root
            and not runc_writing_exec_fifo
            and not known_root_conditions
            and not user_known_write_root_conditions
            and not user_known_write_below_root_activities
            and not user_known_write_below_root_activities
            and not k8s.deployment.name = helm-operator
          output: "File below / or /root opened for writing (user=%user.name command=%proc.cmdline parent=%proc.pname file=%fd.name program=%proc.name container_id=%container.id image=%container.image.repository)"
          priority: ERROR
          tags: [filesystem, mitre_persistence]
        - rule: Change thread namespace
          desc: >
            an attempt to change a program/thread\'s namespace (commonly done
            as a part of creating a container) by calling setns.
          condition: >
            evt.type=setns and evt.dir=<
            and not (container.id=host and proc.name in (docker_binaries, k8s_binaries, lxd_binaries, nsenter))
            and not proc.name in (sysdigcloud_binaries, sysdig, calico, oci-umount, cilium-cni, network_plugin_binaries)
            and not proc.name in (user_known_change_thread_namespace_binaries)
            and not proc.name startswith "runc"
            and not proc.cmdline startswith "containerd"
            and not proc.pname in (sysdigcloud_binaries, hyperkube, kubelet, protokube, dockerd, tini, aws)
            and not python_running_sdchecks
            and not java_running_sdjagent
            and not kubelet_running_loopback
            and not rancher_agent
            and not rancher_network_manager
            and not calico_node
            and not weaveworks_scope
            and not user_known_change_thread_namespace_activities
            and not k8s.pod.labels = app:kured
          output: >
            Namespace change (setns) by unexpected program (user=%user.name command=%proc.cmdline
            parent=%proc.pname %container.info container_id=%container.id image=%container.image.repository:%container.image.tag)
          priority: NOTICE
          tags: [process, mitre_privilege_escalation, mitre_lateral_movement]
        - rule: Write below etc
          desc: an attempt to write to any file below /etc
          condition: write_etc_common and proc.pcmdline != "python3 -u /usr/sbin/waagent -daemon"
          output: "File below /etc opened for writing (user=%user.name command=%proc.cmdline parent=%proc.pname pcmdline=%proc.pcmdline file=%fd.name program=%proc.name gparent=%proc.aname[2] ggparent=%proc.aname[3] gggparent=%proc.aname[4] container_id=%container.id image=%container.image.repository)"
          priority: ERROR
          tags: [filesystem, mitre_persistence]

      rules-admin-activities.yaml: |
        - rule: Detect su or sudo
          desc: detect sudo activities
          condition:
            spawned_process and proc.name in (sudo, su)
          output: >
            Detected sudo or su privilege escalation activity (user=%user.name command=%proc.cmdline)
          priority: WARNING
          tags: [process]
        - rule: Package Management Launched
          desc: detect package management launched
          condition: >
            spawned_process and user.name != "_apt" and package_mgmt_procs and not package_mgmt_ancestor_procs
          output: >
            Package management process launched in container (user=%user.name
            command=%proc.cmdline container_id=%container.id container_name=%container.name image=%container.image.repository:%container.image.tag)
          priority: ERROR
          tags: [process]
      
      rules-ssh-connections.yaml: |
        - rule: Inbound SSH Connection	
          desc: Detect Inbound SSH Connection	
          condition: >	
            ((evt.type in (accept,listen) and evt.dir=<) or	
              (evt.type in (recvfrom,recvmsg))) and ssh_port and k8s.deployment.name != nginx-ingress-controller
          output: >	
            Inbound SSH connection (user=%user.name client_ip=%fd.cip client_port=%fd.cport server_ip=%fd.sip)	
          priority: WARNING	
          tags: [network]

        - rule: Outbound SSH Connection
          desc: Detect Outbound SSH Connection
          condition: >
            ((evt.type = connect and evt.dir=<) or
              (evt.type in (sendto,sendmsg))) and ssh_port and k8s.ns.name != flux
          output: >
            Outbound SSH connection (user=%user.name server_ip=%fd.sip server_port=%fd.sport client_ip=%fd.cip)
          priority: WARNING
          tags: [network]

      rules-file-integrity-monitoring.yaml: |
        - rule: Detect New File
          desc: detect new file created
          condition: >
            evt.type = chmod or evt.type = fchmod and k8s.ns.name != flux and k8s.ns.name != falco and k8s.deployment.name != helm-operator and k8s.deployment.name != tunnelfront and proc.pcmdline != "python3 -u /usr/sbin/waagent -daemon"
          output: >
            File below a known directory opened for writing (user=%user.name
            command=%proc.cmdline file=%fd.name parent=%proc.pname pcmdline=%proc.pcmdline gparent=%proc.aname[2])
          priority: ERROR
          tags: [filesystem]
        - rule: Detect New Directory
          desc: detect new directory created
          condition: >
            mkdir and k8s.ns.name != falco and k8s.ns.name != flux and k8s.ns.name != kubediff and k8s.deployment.name != tunnelfront and k8s.deployment.name != gitlab-sidekiq-all-in-1-v1 and k8s.deployment.name != gitlab-webservice
          output: >
            File below a known directory opened for writing (user=%user.name
            command=%proc.cmdline file=%fd.name parent=%proc.pname pcmdline=%proc.pcmdline gparent=%proc.aname[2])
          priority: ERROR
          tags: [filesystem]
        - rule: Detect File Permission or Ownership Change
          desc: detect file permission/ownership change
          condition: >
            spawned_process and proc.name in (chmod, chown) and proc.args contains "/tmp/" and k8s.deployment.name != tunnelfront
          output: >
            File below a known directory has permission or ownership change (user=%user.name
            command=%proc.cmdline file=%fd.name parent=%proc.pname pcmdline=%proc.pcmdline gparent=%proc.aname[2])
          priority: WARNING
          tags: [filesystem]
        - rule: Detect Directory Change
          desc: detect directories change
          condition: >
            spawned_process and proc.name in (mkdir, rmdir, mvdir, mv) and k8s.ns.name != falco and k8s.deployment.name != tunnelfront
          output: >
            Directory Change in Filesystem (user=%user.name
            command=%proc.cmdline file=%fd.name parent=%proc.pname pcmdline=%proc.pcmdline gparent=%proc.aname[2])
          priority: WARNING
          tags: [filesystem]
        - rule: Kernel Module Modification
          desc: detect kernel module change
          condition: >
            spawned_process and proc.name in (insmod, modprobe) and k8s.ns.name != falco
          output: >
            Kernel Module Change (user=%user.name
            command=%proc.cmdline file=%fd.name parent=%proc.pname pcmdline=%proc.pcmdline gparent=%proc.aname[2] result=%evt.res)
          priority: WARNING
          tags: [process]
        - rule: Node Created in Filesystem
          desc: detect node created in filesystem
          condition: >
            spawned_process and proc.name = mknod
          output: >
            Node Creation in Filesystem (user=%user.name
            command=%proc.cmdline file=%fd.name parent=%proc.pname pcmdline=%proc.pcmdline gparent=%proc.aname[2] result=%evt.res)
          priority: WARNING
          tags: [filesystem]
        - rule: Listen on New Port
          desc: Detection a new port is listening
          condition:
            evt.type = listen and k8s.ns.name != falco and k8s.pod.labels != k8s-app:azure-ip-masq-agent and k8s.deployment.name != gitlab-gitlab-shell and k8s.pod.labels != app:kured and k8s.ns.name != kube-system and k8s.ns.name != velero
          output: >
            A new port is open to listen (port=%fd.sport ip=%fd.sip)
          priority: WARNING
          tags: [network]

      rules-kubernetes.yaml: |
        #
        # Auto-generated set of falco rules for kube_apiserver containers
        # Generated at 2018-05-23 09:58:49 UTC
        #

        # By default, the autogenerated rules include rules that attempt to
        # restrict the set of system calls that can be performed by
        # applications. However, we know that these rules are fairly FP-prone,
        # so they are disabled by default. If you'd like to enable them,
        # either change or override this macro's condition to "evt.num >= 0".
        - macro: kube_apiserver_consider_syscalls
          condition: (evt.num < 0)

        # These policies are limited to containers, specifically those where
        # the container image name starts with "kube_apiserver"
        - macro: app_kube_apiserver
          condition: container and container.image contains "kube-apiserver"

        # Not considering all inbound networking suspect

        # Not considering all outbound networking suspect

        # Restricting listening ports to selected set

        - list: kube_apiserver_allowed_inbound_ports_tcp
          items: [6443]

        - rule: Unexpected inbound tcp connection kube_apiserver
          desc: Detect inbound traffic to kube_apiserver using tcp on a port outside of expected set
          condition: inbound and evt.rawres >= 0 and not fd.sport in (kube_apiserver_allowed_inbound_ports_tcp) and app_kube_apiserver
          output: Inbound network connection to kube_apiserver on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)
          priority: NOTICE

        # Restricting spawned processes to selected set

        - list: kube_apiserver_allowed_processes
          items: ["kube-apiserver"]

        - rule: Unexpected spawned process kube_apiserver
          desc: Detect a process started in a kube_apiserver container outside of an expected set
          condition: spawned_process and not proc.name in (kube_apiserver_allowed_processes) and app_kube_apiserver
          output: Unexpected process spawned in kube_apiserver container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)
          priority: NOTICE

        # Restricting files read or written to specific set

        # Restricting syscalls to selected set

        - list: kube_apiserver_allowed_syscalls
          items: [accept, connect, socket]

        - rule: Unexpected syscall kube_apiserver
          desc: Detect a syscall in a kube_apiserver container outside of an expected set
          condition: kube_apiserver_consider_syscalls and not evt.type in ("<unknown>", kube_apiserver_allowed_syscalls) and app_kube_apiserver
          output: Unexpected syscall in kube_apiserver container (command=%proc.cmdline pid=%proc.pid user=%user.name syscall=%evt.type args=%evt.args %container.info image=%container.image)
          priority: NOTICE
          warn_evttypes: False
        #
        # Auto-generated set of falco rules for kube_controller containers
        # Generated at 2018-05-23 09:58:49 UTC
        #

        # By default, the autogenerated rules include rules that attempt to
        # restrict the set of system calls that can be performed by
        # applications. However, we know that these rules are fairly FP-prone,
        # so they are disabled by default. If you'd like to enable them,
        # either change or override this macro's condition to "evt.num >= 0".
        - macro: kube_controller_consider_syscalls
          condition: (evt.num < 0)

        # These policies are limited to containers, specifically those where
        # the container image name starts with "kube_controller"
        - macro: app_kube_controller
          condition: container and container.image contains "kube-controller"

        # Not considering all inbound networking suspect

        # Not considering all outbound networking suspect

        # Restricting listening ports to selected set

        - list: kube_controller_allowed_inbound_ports_tcp
          items: [10252]

        - rule: Unexpected inbound tcp connection kube_controller
          desc: Detect inbound traffic to kube_controller using tcp on a port outside of expected set
          condition: inbound and evt.rawres >= 0 and not fd.sport in (kube_controller_allowed_inbound_ports_tcp) and app_kube_controller
          output: Inbound network connection to kube_controller on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)
          priority: NOTICE

        # Restricting spawned processes to selected set

        - list: kube_controller_allowed_processes
          items: ["kube-controller-manager"]

        - rule: Unexpected spawned process kube_controller
          desc: Detect a process started in a kube_controller container outside of an expected set
          condition: spawned_process and not proc.name in (kube_controller_allowed_processes) and app_kube_controller
          output: Unexpected process spawned in kube_controller container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)
          priority: NOTICE

        # Restricting files read or written to specific set
        #
        # Auto-generated set of falco rules for kube_dashboard containers
        # Generated at 2018-05-23 09:58:49 UTC
        #

        # By default, the autogenerated rules include rules that attempt to
        # restrict the set of system calls that can be performed by
        # applications. However, we know that these rules are fairly FP-prone,
        # so they are disabled by default. If you'd like to enable them,
        # either change or override this macro's condition to "evt.num >= 0".
        - macro: kube_dashboard_consider_syscalls
          condition: (evt.num < 0)

        # These policies are limited to containers, specifically those where
        # the container image name starts with "kube_dashboard"
        - macro: app_kube_dashboard
          condition: container and container.image contains "kube-dashboard"

        # Not considering all inbound networking suspect

        # Not considering all outbound networking suspect

        # Restricting listening ports to selected set

        - list: kube_dashboard_allowed_inbound_ports_tcp
          items: [8443]

        - rule: Unexpected inbound tcp connection kube_dashboard
          desc: Detect inbound traffic to kube_dashboard using tcp on a port outside of expected set
          condition: inbound and evt.rawres >= 0 and not fd.sport in (kube_dashboard_allowed_inbound_ports_tcp) and app_kube_dashboard
          output: Inbound network connection to kube_dashboard on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)
          priority: NOTICE

        # Restricting spawned processes to selected set

        - list: kube_dashboard_allowed_processes
          items: ["/dashboard"]

        - rule: Unexpected spawned process kube_dashboard
          desc: Detect a process started in a kube_dashboard container outside of an expected set
          condition: spawned_process and not proc.name in (kube_dashboard_allowed_processes) and app_kube_dashboard
          output: Unexpected process spawned in kube_dashboard container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)
          priority: NOTICE

        # Restricting files read or written to specific set

        - list: kube_dashboard_allowed_file_prefixes_readonly
          items: ["/public"]

        - rule: Unexpected file access readonly for kube_dashboard
          desc: Detect an attempt to access a file readonly other than below an expected list of directories
          condition: (open_read and evt.is_open_write=false) and not fd.name pmatch (kube_dashboard_allowed_file_prefixes_readonly) and app_kube_dashboard
          output: Unexpected file accessed readonly for kube_dashboard (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)
          priority: NOTICE
        #
        # Auto-generated set of falco rules for kube_dns containers
        # Generated at 2018-05-23 08:29:54 UTC
        #

        # By default, the autogenerated rules include rules that attempt to
        # restrict the set of system calls that can be performed by
        # applications. However, we know that these rules are fairly FP-prone,
        # so they are disabled by default. If you'd like to enable them,
        # either change or override this macro's condition to "evt.num >= 0".
        - macro: kube_dns_consider_syscalls
          condition: (evt.num < 0)

        # These policies are limited to containers, specifically those where
        # the container image name starts with "kube_dns"
        - macro: app_kube_dns
          condition: container and container.image contains "kube-dns"

        # Not considering all inbound networking suspect

        # Not considering all outbound networking suspect

        # Restricting listening ports to selected set

        - list: kube_dns_allowed_inbound_ports_tcp
          items: [10053, 10055, 8081]

        - rule: Unexpected inbound tcp connection kube_dns
          desc: Detect inbound traffic to kube_dns using tcp on a port outside of expected set
          condition: inbound and evt.rawres >= 0 and not fd.sport in (kube_dns_allowed_inbound_ports_tcp) and app_kube_dns
          output: Inbound network connection to kube_dns on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)
          priority: NOTICE

        # Restricting spawned processes to selected set

        - list: kube_dns_allowed_processes
          items: ["/kube-dns"]

        - rule: Unexpected spawned process kube_dns
          desc: Detect a process started in a kube_dns container outside of an expected set
          condition: spawned_process and not proc.name in (kube_dns_allowed_processes) and app_kube_dns
          output: Unexpected process spawned in kube_dns container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)
          priority: NOTICE
        #
        # Auto-generated set of falco rules for kube_scheduler containers
        # Generated at 2018-05-23 09:58:49 UTC
        #

        # By default, the autogenerated rules include rules that attempt to
        # restrict the set of system calls that can be performed by
        # applications. However, we know that these rules are fairly FP-prone,
        # so they are disabled by default. If you'd like to enable them,
        # either change or override this macro's condition to "evt.num >= 0".
        - macro: kube_scheduler_consider_syscalls
          condition: (evt.num < 0)

        # These policies are limited to containers, specifically those where
        # the container image name starts with "kube_scheduler"
        - macro: app_kube_scheduler
          condition: container and container.image contains "kube-scheduler"

        # Not considering all inbound networking suspect

        # Not considering all outbound networking suspect

        # Restricting listening ports to selected set

        - list: kube_scheduler_allowed_inbound_ports_tcp
          items: [10251]

        - rule: Unexpected inbound tcp connection kube_scheduler
          desc: Detect inbound traffic to kube_scheduler using tcp on a port outside of expected set
          condition: inbound and evt.rawres >= 0 and not fd.sport in (kube_scheduler_allowed_inbound_ports_tcp) and app_kube_scheduler
          output: Inbound network connection to kube_scheduler on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)
          priority: NOTICE

        # Restricting spawned processes to selected set

        - list: kube_scheduler_allowed_processes
          items: ["kube-scheduler"]

        - rule: Unexpected spawned process kube_scheduler
          desc: Detect a process started in a kube_scheduler container outside of an expected set
          condition: spawned_process and not proc.name in (kube_scheduler_allowed_processes) and app_kube_scheduler
          output: Unexpected process spawned in kube_scheduler container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)
          priority: NOTICE

        # Restricting files read or written to specific set

        # Restricting syscalls to selected set

        - list: kube_scheduler_allowed_syscalls
          items: [accept]

        - rule: Unexpected syscall kube_scheduler
          desc: Detect a syscall in a kube_scheduler container outside of an expected set
          condition: kube_scheduler_consider_syscalls and not evt.type in ("<unknown>", kube_scheduler_allowed_syscalls) and app_kube_scheduler
          output: Unexpected syscall in kube_scheduler container (command=%proc.cmdline pid=%proc.pid user=%user.name syscall=%evt.type args=%evt.args %container.info image=%container.image)
          priority: NOTICE
          warn_evttypes: False
          
      rules-nginx.yaml: |
        - macro: nginx_consider_syscalls
          condition: (evt.num < 0)

        - macro: app_nginx
          condition: container and container.image contains "nginx"

        # Any outbound traffic raises a WARNING

        - rule: Unauthorized process opened an outbound connection (nginx)
          desc: A nginx process tried to open an outbound connection and is not whitelisted
          condition: outbound and evt.rawres >= 0 and app_nginx
          output: Non-whitelisted process opened an outbound connection (command=%proc.cmdline
            connection=%fd.name)
          priority: WARNING


        # Restricting listening ports to selected set

        - list: nginx_allowed_inbound_ports_tcp
          items: [80, 22, 443, 10254]

        - rule: Unexpected inbound tcp connection nginx
          desc: Detect inbound traffic to nginx using tcp on a port outside of expected set
          condition: inbound and evt.rawres >= 0 and not fd.sport in (nginx_allowed_inbound_ports_tcp) and app_nginx
          output: Inbound network connection to nginx on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)
          priority: NOTICE

        # Restricting spawned processes to selected set

        - list: nginx_allowed_processes
          items: ["nginx", "app-entrypoint.", "basename", "dirname", "grep", "nami", "node", "tini"]

        - rule: Unexpected spawned process nginx
          desc: Detect a process started in a nginx container outside of an expected set
          condition: spawned_process and not proc.name in (nginx_allowed_processes) and app_nginx
          output: Unexpected process spawned in nginx container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)
          priority: NOTICE

        # Restricting files read or written to specific set

        - list: nginx_allowed_file_prefixes_readwrite
          items: ["/var/log/nginx", "/var/run"]
        # Remember to add your nginx cache path

        - rule: Unexpected file access readwrite for nginx
          desc: Detect an attempt to access a file readwrite other than below an expected list of directories
          condition: (open_write) and not fd.name pmatch (nginx_allowed_file_prefixes_readwrite) and app_nginx
          output: Unexpected file accessed readwrite for nginx (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)
          priority: NOTICE

        # Restricting syscalls to selected set

        - list: nginx_allowed_syscalls
          items: [accept, bind, clone, connect, dup, listen, mkdir, open, recvfrom, recvmsg, sendto, setgid, setuid, socket, socketpair]

        - rule: Unexpected syscall nginx
          desc: Detect a syscall in a nginx container outside of an expected set
          condition: nginx_consider_syscalls and not evt.type in ("<unknown>", nginx_allowed_syscalls) and app_nginx
          output: Unexpected syscall in nginx container (command=%proc.cmdline pid=%proc.pid user=%user.name syscall=%evt.type args=%evt.args %container.info image=%container.image)
          priority: NOTICE
          warn_evttypes: False